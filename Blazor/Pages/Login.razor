@page "/login"
@layout AuthorizeLayout
@using Blazor.Models
@using Blazor.Services

@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<!-- Default form login -->
<EditForm Model="@loginModel" OnValidSubmit="onLoginSubmit" class="text-center">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p class="h4 mb-4">Sign in</p>

    <!-- Email -->
    <InputText type="text" id="email" class="form-control mb-4" placeholder="E-mail" @bind-Value="loginModel.Email" />
    <!-- Password -->
    <InputText type="password" id="password" class="form-control mb-4" placeholder="Password" @bind-Value="loginModel.Password" />

    <p class="text-danger">@LoginErrorMessage</p>

    <!-- Sign in button -->
    <button class="btn btn-info btn-block my-4" type="submit">Sign in</button>

    <!-- Register -->
    <p>
        Not a member?
        <a href="/register">Register</a>
    </p>

    <!-- Social login -->
    <p>or sign in with:</p>

    <a href="#" class="mx-1" role="button"><i class="fab fa-facebook-f"></i></a>
    <a href="#" class="mx-1" role="button"><i class="fab fa-twitter"></i></a>
    <a href="#" class="mx-1" role="button"><i class="fab fa-linkedin-in"></i></a>
    <a href="#" class="mx-1" role="button"><i class="fab fa-github"></i></a>

</EditForm>
<!-- Default form login -->

@code {
    private LoginModel loginModel;
    private string LoginErrorMessage { get; set; }


    protected override Task OnInitializedAsync()
    {
        loginModel = new LoginModel()
        {
            Email = "erika@hotmail.com",
            Password = "BytMig123"

        };

        return base.OnInitializedAsync();
    }


    private async Task<bool> onLoginSubmit()
    {
        var response = await AuthService.LoginAsync(loginModel);


        if (response.Token != null)
        {
            LoginErrorMessage = string.Empty;

            await ((AuthStateProvider)AuthenticationStateProvider).Authenticated(response);
            NavigationManager.NavigateTo("/");

        }
        else
        {
            LoginErrorMessage = "Incorrect email address or password";
        }

        return await Task.FromResult(true);

    }
}